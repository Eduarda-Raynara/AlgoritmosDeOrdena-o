#include <iostream>
#include <vector>
#include <random>
#include <chrono>
//#include <algorithm> // Para std::sort

using namespace std;




//function to swap elements
void swap(int* a, int* b){
	int t = *a;
	*a = *b;
	*b = t;
}

//--------------------------------sort algorithms---------------------------

//selection sort O(n²)
void selectionSort(vector<int> &v){
    auto start = std::chrono::steady_clock::now();
	/*
		Parameters:
		v = input array to be ordered
	*/
	int min_idx;
	int n=v.size();
	for(int i=0;i<n-1;i++){
		min_idx=i;
		for(int j=i+1;j<n;j++){
			if(v[j]<v[min_idx])
				min_idx=j;
		}
		if(min_idx!=i){
			int temp=v[min_idx];
			v[min_idx]=v[i];
			v[i]=temp;
		}
	}
	auto end = std::chrono::steady_clock::now();
	auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    std::cout << "Tempo decorrido no selectionSort: " << elapsed.count() << " milissegundos." << std::endl;
}


//+++++++++++++++++++++++merge sort++++++++++++++++++++++++++++++

void merge(vector<int> &v, int low, int high, int mid){
	int i, j, k, c[50000000000000000];
	i = low;
	k = low;
	j = mid + 1;
    	while (i <= mid && j <= high){
        	if (v[i] < v[j]){
            		c[k] = v[i];
            		k++;
            		i++;
        	}
        	else{
            		c[k] = v[j];
            		k++;
            		j++;
        	}
    	}
    	while (i <= mid){
        	c[k] = v[i];
        	k++;
        	i++;
    	}
    	while (j <= high){
        	c[k] = v[j];
        	k++;
        	j++;
    	}
    	for (i = low; i < k; i++){
        	v[i] = c[i];
    	}
}

void mergeSort(vector<int> &v, int low, int high){
	if(low<high){
		int mid;
		mid = (low+high)/2;
		mergeSort(v, low, mid);
		mergeSort(v, mid+1, high);
		merge(v,low,high,mid);
	}

}


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


//+++++++++++++++++++++++quick sort++++++++++++++++++++++++++++++
int partition(vector<int> &v, int low, int high){
	int pivot = v[high];
	int i = (low - 1);
	for (int j = low; j <= high - 1; j++) {
		if (v[j] < pivot) {
			i++;
			swap(&v[i], &v[j]);
		}
	}
	swap(&v[i + 1], &v[high]);
	return (i + 1);
}

void quickSort(vector<int> &v, int low, int high){
    
	if (low < high) { 
		int pi = partition(v, low, high);
		quickSort(v, low, pi - 1);
		quickSort(v, pi + 1, high);
	}
}
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




//shell sort
void shellSort(vector<int> &v){
    auto start = std::chrono::steady_clock::now();
	/*
		Parameters:
		v = input array to be ordered
	*/
	int n=v.size();
	for (int h=n/2; h>0;h/=2){
		for (int i=h;i<n;i+=1){
			int temp=v[i];
			int j;
			for (j=i;j>=h && v[j-h]>temp;j-=h)
				v[j]=v[j-h];
			v[j]=temp;
		}
	}
	auto end = std::chrono::steady_clock::now();
	auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    std::cout << "Tempo decorrido no shellSort: " << elapsed.count() << " milissegundos." << std::endl;
}

//insertion sort O(n²)
void insertionSort(vector<int> &v){
    auto start = std::chrono::steady_clock::now();
	/*
		Parameters:
		v = input array to be ordered
	*/
	int n=v.size();
	int i,key,j;
	for(i=1;i<n;i++){
		key=v[i];
		j=i-1;
		while(j>=0&&v[j]>key){
			v[j+1]=v[j];
			j=j-1;
		}
		v[j+1]=key;
	}
	auto end = std::chrono::steady_clock::now();
	auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    std::cout << "Tempo decorrido no insertionSort: " << elapsed.count() << " milissegundos." << std::endl;
}

//bubble sort O(n²)
void bubbleSort(vector<int> &v){
    // Início da contagem de tempo
    auto start = std::chrono::steady_clock::now();
    
	int n=v.size();
	for(int i=0;i<n-1;i++){
		for (int j=0;j<n-i-1;j++){
			if(v[j]>v[j+1]){
				int temp=v[j];
				v[j]=v[j+1];
				v[j+1]=temp;
			} 
		}
	}
	
	auto end = std::chrono::steady_clock::now();
	auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    std::cout << "Tempo decorrido no bubbleSort: " << elapsed.count() << " milissegundos." << std::endl;
}



// Gera um vetor de inteiros aleatórios
vector<int> generateRandomVector(int max) {
    vector<int> arrai;
    random_device rd;
    mt19937 gen(rd());

    for (int v = 1; v <= max; v++) {
        uniform_int_distribution<> distrib(0, 80);
        arrai.push_back(distrib(gen));
    }
    return arrai;
}

// Função para imprimir os elementos de um vetor
void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}



int main() {
    vector<int> v = generateRandomVector(10000);
    
    vector<int> a = v;
    
    bubbleSort(a); // Utilizando std::sort para ordenar
    
     a = v;
    
    selectionSort(a);
    
    a = v;
    
	insertionSort(a);
    
    a = v;
    
	shellSort(a);
    
    a = v;
    
    auto inicio = std::chrono::steady_clock::now();
	mergeSort(a,0,a.size()-1);
	
	auto fim = std::chrono::steady_clock::now();
	auto tudo = std::chrono::duration_cast<std::chrono::milliseconds>(fim - inicio);
    std::cout << "Tempo decorrido no mergeSort: " << tudo.count() << " milissegundos." << std::endl;
    
    a = v;
    
    auto start = std::chrono::steady_clock::now();
    quickSort(a,0,a.size()-1);
    
    auto end = std::chrono::steady_clock::now();
	auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    std::cout << "Tempo decorrido no quickSort: " << elapsed.count() << " milissegundos." << std::endl;
    
    
    
	

    return 0;    
}

